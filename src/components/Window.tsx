/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import type { JSX } from 'react'
import { useGLTF } from '@react-three/drei'
import type { GLTF } from 'three-stdlib'
import { useLayoutEffect } from 'react'
type GLTFResult = GLTF & {
  nodes: {
    ['Node-Mesh']: THREE.Mesh
    ['Node-Mesh_1']: THREE.Mesh
  }
  materials: {
    mat24: THREE.MeshStandardMaterial
    mat20: THREE.MeshStandardMaterial
  }
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials,scene } = useGLTF('./models/Window.glb') as unknown as GLTFResult
  useLayoutEffect(() => {
    if (scene) {
      const box = new THREE.Box3().setFromObject(scene);
      const size = new THREE.Vector3();
      box.getSize(size);

      console.log('Model Size:', size); // size will contain x, y, z dimensions
    }
  }, [scene]);
  return (
    <group {...props} dispose={null}>
      <mesh
        name="Node-Mesh"
        castShadow
        receiveShadow
        geometry={nodes['Node-Mesh'].geometry}
        material={materials.mat24}
      />
      <mesh
        name="Node-Mesh_1"
        castShadow
        receiveShadow
        geometry={nodes['Node-Mesh_1'].geometry}
        material={materials.mat20}
      />
    </group>
  )
}

useGLTF.preload('./models/Window.glb')
